#cloud-config

coreos:
  etcd:
    # generate a new token for each unique cluster from https://discovery.etcd.io/new
    # WARNING: replace each time you 'vagrant destroy'
    #discovery: https://discovery.etcd.io/<token>
    addr: $public_ipv4:4001
    peer-addr: $public_ipv4:7001
  fleet:
    public-ip: $public_ipv4
  units:
  - name: etcd.service
    command: start
  - name: fleet.service
    command: start
  - name: docker-tcp.socket
    command: start
    enable: true
    content: |
      [Unit]
      Description=Docker Socket for the API

      [Socket]
      ListenStream=2375
      Service=docker.service
      BindIPv6Only=both

      [Install]
      WantedBy=sockets.target
  - name: settimezone.service
    command: start
    content: |
      [Unit]
      Description=Set the timezone

      [Service]
      ExecStart=/usr/bin/timedatectl set-timezone UTC
      RemainAfterExit=yes
      Type=oneshot
write_files:
- path: /etc/ntp.conf
  content: |
    # Common pool
    server 0.pool.ntp.org
    server 1.pool.ntp.org

    # - Allow only time queries, at a limited rate.
    # - Allow all local queries (IPv4, IPv6)
    restrict default nomodify nopeer noquery limited kod
    restrict 127.0.0.1
    restrict [::1]
- path: /home/core/nsqlookupd.service
  content: |
    [Unit]
    Description=Nsqlookupd
    After=docker.service
    Requires=docker.service

    [Service]
    TimeoutStartSec=0
    ExecStartPre=-/usr/bin/docker kill nsqlookupd
    ExecStartPre=-/usr/bin/docker rm nsqlookupd
    ExecStartPre=/usr/bin/docker pull nsqio/nsqlookupd
    ExecStart=/usr/bin/docker run -rm --name=nsqlookupd -p 4160:4160 -p 4161:4161 nsqio/nsqlookupd
    ExecStop=/usr/bin/docker stop nsqlookupd
    Restart=on-failure
    RestartSec=10s
- path: /home/core/nsqlookupd-sidekick.service
  content: |
    [Unit]
    Description=Nsqlookupd etcd registration
    Requires=etcd.service
    Requires=nsqlookupd.service
    After=etcd.service
    After=nsqlookupd.service
    BindsTo=nsqlookupd.service

    [Service]
    EnvironmentFile=/etc/environment
    ExecStart=/bin/bash -c '\
      while true; do \
        HTTP_PORT=4161; \
        TCP_PORT=4160; \
        curl -f ${COREOS_PRIVATE_IPV4}:$HTTP_PORT/ping; \
        if [ $? -eq 0 ]; then \
          /usr/bin/etcdctl set /nsqlookupd ${COREOS_PRIVATE_IPV4}:$TCP_PORT --ttl 30; \
          /usr/bin/etcdctl set /nsqlookupd-http ${COREOS_PRIVATE_IPV4}:$HTTP_PORT --ttl 30; \
        else \
          /usr/bin/etcdctl rm /nsqlookupd; \
          /usr/bin/etcdctl rm /nsqlookupd-http; \
        fi; \
        sleep 15; \
      done'
    ExecStop=/usr/bin/etcdctl rm /nsqlookupd
    Restart=on-failure
    RestartSec=10s

    [X-Fleet]
    MachineOf=nsqlookupd.service
- path: /home/core/nsqd.service
  content: |
    [Unit]
    Description=Nsqd
    After=docker.service
    After=nsqlookupd.service
    Requires=docker.service
    Requires=nsqlookupd.service

    [Service]
    TimeoutStartSec=0
    EnvironmentFile=/etc/environment
    ExecStartPre=-/usr/bin/docker kill nsqd
    ExecStartPre=-/usr/bin/docker rm nsqd
    ExecStartPre=/usr/bin/docker pull nsqio/nsqd
    ExecStart=/bin/bash -c '\
        /usr/bin/docker run -rm --name=nsqd -p 4150:4150 -p 4151:4151 nsqio/nsqd --lookupd-tcp-address=$(/usr/bin/etcdctl get /nsqlookupd) --broadcast-address=${COREOS_PRIVATE_IPV4} \
        '
    ExecStop=/usr/bin/docker stop nsqd
    Restart=always
    RestartSec=10s
- path: /home/core/nsqd-sidekick.service
  content: |
    [Unit]
    Description=Nsqd etcd watcher
    Requires=etcd.service
    Requires=nsqd.service
    Requires=nsqlookupd.service
    After=etcd.service
    After=nsqd.service
    BindsTo=nsqd.service

    [Service]
    EnvironmentFile=/etc/environment
    ExecStart=/bin/bash -c '\
      NSQLOOKUPD=$(/usr/bin/etcdctl get /nsqlookupd); \
      while true; do \
        echo "checking nsqlookupd location"; \
        NSQLOOKUPDCHECK=$(/usr/bin/etcdctl get /nsqlookupd); \
        if [ "$NSQLOOKUPDCHECK" != "$NSQLOOKUPD" ]; then \
          echo "restarting nsqd"; \
          /usr/bin/docker kill nsqd; \
        fi; \
        sleep 30; \
      done'

    [X-Fleet]
    MachineOf=nsqd.service